package myUtil.cmd;

/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 08 01:07:56 GMT 2018
 */


import org.junit.Test;

import java.util.*;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.SynchronousQueue;

import static org.junit.Assert.*;

public class CMDTest {

    @Test
    public void te() {
        CMD cd = new CMD();
        cd.addOption(new CMD.Option.StringOption('s', "st"));
        cd.addOption(new CMD.Option.BooleanOption('b', "bl"));
        cd.addOption(new CMD.Option.BooleanOption('c', "cl"));
        String[] argv = new String[]{"--st=1", "--st", "1", "--", "o"};
        try {
            cd.parse(argv);
            String re = cd.getOptionValue(new CMD.Option.StringOption('s', "st"), "");
            assertNotNull(re);
            cd.getOptionValues(new CMD.Option.StringOption('s', "st"));
            cd.parse(null, Locale.getDefault());
        } catch (Exception e) {
        }
        try {
            cd.parse(new String[]{"-sb", "--"});
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            cd.parse(new String[]{"-bc", "--"});
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            cd.parse(new String[]{"-b", "--"});
        } catch (CMD.OptionException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void te2() {
        CMD cmd = new CMD();

    }

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String[] stringArray0 = new String[7];
        stringArray0[0] = "6zhbEPU}-9";
        stringArray0[1] = "-namedPipePath";
        stringArray0[2] = "-W1BL4UIVLp";
        stringArray0[3] = "---;(.`PhxP.1;2+VR";
        stringArray0[4] = "-r+jrUL\"";
        String string0 = "n";
        stringArray0[5] = "n";
        stringArray0[6] = "#0p&@\"Cs1";
        try {
            cMD0.parse(stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal option: 'n' in '-namedPipePath'
            //

        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String[] stringArray0 = new String[8];
        stringArray0[0] = "pU>&%g7YqhI";
        stringArray0[1] = "4:h[h}9Sz";
        stringArray0[2] = "!{))f~LOP6{L.d)T";
        stringArray0[3] = "";
        stringArray0[4] = "-";
        stringArray0[5] = "net.mooctest.CMD$Option$BooleanOption";
        stringArray0[6] = "!116X*f[*c1l";
        stringArray0[7] = "?v_\"y-7n,C8g<=:";
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
        assertEquals("DEU", locale0.getISO3Country());
        assertEquals("de", locale0.getLanguage());
        assertEquals("deu", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("DE", locale0.getCountry());
        assertEquals("de_DE", locale0.toString());

        try {
            cMD0.parse(stringArray0, locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Unknown option '-'
            //

        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String string0 = "";
        Locale locale0 = new Locale("", "unhandled SessionStateChanged notice! ");
        assertNotNull(locale0);
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getISO3Language());
        assertEquals("_UNHANDLED SESSIONSTATECHANGED NOTICE! ", locale0.toString());
        assertEquals("", locale0.getVariant());
        assertEquals("UNHANDLED SESSIONSTATECHANGED NOTICE! ", locale0.getCountry());

        String string1 = ")bm*dIabc<VzA6j|^P&";
        CMD.Option<Long> cMD_Option0 = cMD0.addLongOption('6', ")bm*dIabc<VzA6j|^P&");
        assertNotNull(cMD_Option0);
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("6", cMD_Option0.shortForm());
        assertEquals(")bm*dIabc<VzA6j|^P&", cMD_Option0.longForm());

        String string2 = locale0.getDisplayScript();
        assertFalse(string2.equals((Object) string1));
        assertNotNull(string2);
        assertEquals("", string2);
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getISO3Language());
        assertEquals("_UNHANDLED SESSIONSTATECHANGED NOTICE! ", locale0.toString());
        assertEquals("", locale0.getVariant());
        assertEquals("UNHANDLED SESSIONSTATECHANGED NOTICE! ", locale0.getCountry());

        Double double0 = new Double(1.0);
        assertNotNull(double0);
        assertEquals(1.0, (double) double0, 0.01);

        double double1 = 0.0;
        String[] stringArray0 = new String[5];
        stringArray0[0] = ")bm*dIabc<VzA6j|^P&";
        stringArray0[1] = ")bm*dIabc<VzA6j|^P&";
        stringArray0[2] = "-5{pJ0)GQm`7$}RY";
        stringArray0[3] = ")bm*dIabc<VzA6j|^P&";
        stringArray0[4] = ")bm*dIabc<VzA6j|^P&";
        try {
            cMD0.parse(stringArray0, locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal option: '5' in '-5{pJ0)GQm`7$}RY'
            //
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Double> cMD_Option0 = cMD0.addDoubleOption("-Unknown option '");
        assertNotNull(cMD_Option0);
        assertNull(cMD_Option0.shortForm());
        assertEquals("-Unknown option '", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());

        CMD.Option<Long> cMD_Option1 = cMD0.addLongOption('P', "Wmz@D");
        assertNotNull(cMD_Option1);
        assertEquals("Wmz@D", cMD_Option1.longForm());
        assertTrue(cMD_Option1.wantsValue());
        assertEquals("P", cMD_Option1.shortForm());

        CMD.Option<String> cMD_Option2 = cMD0.addStringOption("Gf$fKRmWJ:?>iSD^");
        assertNotNull(cMD_Option2);
        assertEquals("Gf$fKRmWJ:?>iSD^", cMD_Option2.longForm());
        assertTrue(cMD_Option2.wantsValue());
        assertNull(cMD_Option2.shortForm());

        String string0 = "-W1BL4UIVLp";
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Wmz@D";
        stringArray0[1] = "-W1BL4UIVLp";
        stringArray0[2] = "-W1BL4UIVLp";
        stringArray0[3] = "Wmz@D";
        stringArray0[4] = "Wmz@D";
        stringArray0[5] = "Wmz@D";
        stringArray0[6] = "Wmz@D";
        stringArray0[7] = "-W1BL4UIVLp";
        stringArray0[8] = "-W1BL4UIVLp";
        Locale locale0 = Locale.FRENCH;
        assertNotNull(locale0);
        assertEquals("", locale0.getVariant());
        assertEquals("fr", locale0.toString());
        assertEquals("", locale0.getCountry());
        assertEquals("fra", locale0.getISO3Language());
        assertEquals("", locale0.getISO3Country());
        assertEquals("fr", locale0.getLanguage());

        try {
            cMD0.parse(stringArray0, locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal option: '' in '-W1BL4UIVLp'
            //
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<String> cMD_Option0 = cMD0.addStringOption("cgPM;x2/`pYG4nhE");
        assertNotNull(cMD_Option0);
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("cgPM;x2/`pYG4nhE", cMD_Option0.longForm());

        CMD.IllegalOptionValueException cMD_IllegalOptionValueException0 = new CMD.IllegalOptionValueException(cMD_Option0, "'");
        assertNotNull(cMD_IllegalOptionValueException0);

        String string0 = cMD_IllegalOptionValueException0.getValue();
        assertNotNull(string0);
        assertEquals("'", string0);
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("cgPM;x2/`pYG4nhE", cMD_Option0.longForm());
        assertEquals("'", cMD_IllegalOptionValueException0.getValue());

        String[] stringArray0 = new String[9];
        stringArray0[0] = "cgPM;x2/`pYG4nhE";
        stringArray0[1] = "eo5WhMOwF~.B<R+ou]";
        stringArray0[2] = "cgPM;x2/`pYG4nhE";
        stringArray0[3] = "cgPM;x2/`pYG4nhE";
        stringArray0[4] = "'";
        stringArray0[5] = "'";
        stringArray0[6] = "cgPM;x2/`pYG4nhE";
        stringArray0[7] = null;
        stringArray0[8] = "'";
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("en", locale0.getLanguage());
        assertEquals("CA", locale0.getCountry());
        assertEquals("", locale0.getVariant());
        assertEquals("en_CA", locale0.toString());

        // Undeclared exception!
        try {
            cMD0.parse(stringArray0, locale0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String string0 = "' requires a value";
        CMD.Option<Integer> cMD_Option0 = cMD0.addIntegerOption('l', "' requires a value");
        assertNotNull(cMD_Option0);
        assertEquals("l", cMD_Option0.shortForm());
        assertEquals("' requires a value", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());

        String string1 = "3mE/Q";
        CMD.NotFlagException cMD_NotFlagException0 = new CMD.NotFlagException("3mE/Q", 'r');
        assertNotNull(cMD_NotFlagException0);


        Locale locale0 = Locale.CANADA_FRENCH;
        assertNotNull(locale0);
        assertEquals("fr_CA", locale0.toString());
        assertEquals("fra", locale0.getISO3Language());
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("CA", locale0.getCountry());
        assertEquals("", locale0.getVariant());
        assertEquals("fr", locale0.getLanguage());

        Object[] objectArray0 = new Object[5];
        CMD.Option<Object> cMD_Option1 = null;
        DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
        assertNotNull(delayQueue0);

        Delayed delayed0 = delayQueue0.poll();
        assertNull(delayed0);

        // Undeclared exception!
        try {
            cMD0.getOptionValue((CMD.Option<Object>) null, (Object) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption("net.mooctest.CMD$Option$DoubleOption");
        assertNotNull(cMD_Option_StringOption0);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertEquals("net.mooctest.CMD$Option$DoubleOption", cMD_Option_StringOption0.longForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());

        String string0 = "H#xPqZ0z4(doG[(R";
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
        assertEquals("IT", locale0.getCountry());
        assertEquals("it", locale0.getLanguage());
        assertEquals("it_IT", locale0.toString());
        assertEquals("ita", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("ITA", locale0.getISO3Country());

        String string1 = cMD_Option_StringOption0.getValue("H#xPqZ0z4(doG[(R", locale0);
        assertTrue(string1.equals((Object) string0));
        assertNotNull(string1);
        assertEquals("H#xPqZ0z4(doG[(R", string1);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertEquals("net.mooctest.CMD$Option$DoubleOption", cMD_Option_StringOption0.longForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("IT", locale0.getCountry());
        assertEquals("it", locale0.getLanguage());
        assertEquals("it_IT", locale0.toString());
        assertEquals("ita", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("ITA", locale0.getISO3Country());

        Locale locale1 = Locale.forLanguageTag("H#xPqZ0z4(doG[(R");
        assertFalse(locale1.equals((Object) locale0));
        assertNotNull(locale1);
        assertEquals("", locale1.toString());
        assertEquals("", locale1.getVariant());
        assertEquals("", locale1.getCountry());
        assertEquals("", locale1.getLanguage());
        assertEquals("", locale1.getISO3Language());
        assertEquals("", locale1.getISO3Country());
        assertNotSame(locale1, locale0);

        String string2 = cMD_Option_StringOption0.getValue("B|Mf'm^Hv`*I:>a&c", locale1);
        assertFalse(locale1.equals((Object) locale0));
        assertFalse(string2.equals((Object) string0));
        assertFalse(string2.equals((Object) string1));
        assertNotNull(string2);
        assertEquals("B|Mf'm^Hv`*I:>a&c", string2);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertEquals("net.mooctest.CMD$Option$DoubleOption", cMD_Option_StringOption0.longForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("", locale1.toString());
        assertEquals("", locale1.getVariant());
        assertEquals("", locale1.getCountry());
        assertEquals("", locale1.getLanguage());
        assertEquals("", locale1.getISO3Language());
        assertEquals("", locale1.getISO3Country());
        assertNotSame(locale1, locale0);

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<String> cMD_Option0 = cMD0.addOption((CMD.Option<String>) cMD_Option_StringOption0);
        assertNotNull(cMD_Option0);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertEquals("net.mooctest.CMD$Option$DoubleOption", cMD_Option_StringOption0.longForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("net.mooctest.CMD$Option$DoubleOption", cMD_Option0.longForm());

        // Undeclared exception!
        try {
            cMD0.addIntegerOption((String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        char char0 = 'J';
        CMD.Option<Boolean> cMD_Option0 = cMD0.addBooleanOption('J', "'Z{nTMo{vx-5j{fxGQ");
        assertNotNull(cMD_Option0);
        assertEquals("'Z{nTMo{vx-5j{fxGQ", cMD_Option0.longForm());
        assertFalse(cMD_Option0.wantsValue());
        assertEquals("J", cMD_Option0.shortForm());

        CMD.Option<String> cMD_Option1 = cMD0.addStringOption('J', "&d[`+n5L8_A^y");
        assertNotNull(cMD_Option1);
        assertEquals("&d[`+n5L8_A^y", cMD_Option1.longForm());
        assertTrue(cMD_Option1.wantsValue());
        assertEquals("J", cMD_Option1.shortForm());

        CMD.Option<String> cMD_Option2 = cMD0.addOption(cMD_Option1);
        assertNotNull(cMD_Option2);
        assertEquals("&d[`+n5L8_A^y", cMD_Option1.longForm());
        assertTrue(cMD_Option1.wantsValue());
        assertEquals("J", cMD_Option1.shortForm());
        assertEquals("&d[`+n5L8_A^y", cMD_Option2.longForm());
        assertEquals("J", cMD_Option2.shortForm());
        assertTrue(cMD_Option2.wantsValue());
        assertSame(cMD_Option1, cMD_Option2);
        assertSame(cMD_Option2, cMD_Option1);

        String string0 = null;
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("CN", locale0.getCountry());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("", locale0.getVariant());
        assertEquals("zh_CN", locale0.toString());

        String string1 = cMD_Option2.parseValue((String) null, locale0);
        assertNull(string1);
        assertEquals("&d[`+n5L8_A^y", cMD_Option1.longForm());
        assertTrue(cMD_Option1.wantsValue());
        assertEquals("J", cMD_Option1.shortForm());
        assertEquals("&d[`+n5L8_A^y", cMD_Option2.longForm());
        assertEquals("J", cMD_Option2.shortForm());
        assertTrue(cMD_Option2.wantsValue());
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("CN", locale0.getCountry());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("", locale0.getVariant());
        assertEquals("zh_CN", locale0.toString());
        assertSame(cMD_Option1, cMD_Option2);
        assertSame(cMD_Option2, cMD_Option1);

        try {
            cMD_Option2.getValue((String) null, locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal value '' for option -J/--&d[`+n5L8_A^y
            //
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Double> cMD_Option0 = cMD0.addDoubleOption("8YU:7<@7@J");
        assertNotNull(cMD_Option0);
        assertEquals("8YU:7<@7@J", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());

        CMD.Option<Double> cMD_Option1 = cMD0.addDoubleOption('y', "net.mooctest.CMD$Option");
        assertFalse(cMD_Option1.equals((Object) cMD_Option0));
        assertNotNull(cMD_Option1);
        assertEquals("net.mooctest.CMD$Option", cMD_Option1.longForm());
        assertEquals("y", cMD_Option1.shortForm());
        assertTrue(cMD_Option1.wantsValue());
        assertNotSame(cMD_Option1, cMD_Option0);

        CMD.Option<String> cMD_Option2 = cMD0.addStringOption("8bhxV_)oQ{*H4[|@");
        assertNotNull(cMD_Option2);
        assertTrue(cMD_Option2.wantsValue());
        assertNull(cMD_Option2.shortForm());
        assertEquals("8bhxV_)oQ{*H4[|@", cMD_Option2.longForm());

        String[] stringArray0 = new String[5];
        stringArray0[0] = "8bhxV_)oQ{*H4[|@";
        stringArray0[1] = "net.mooctest.CMD$Option";
        stringArray0[2] = "8bhxV_)oQ{*H4[|@";
        stringArray0[3] = "";
        stringArray0[4] = "8YU:7<@7@J";
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
        assertEquals("KR", locale0.getCountry());
        assertEquals("kor", locale0.getISO3Language());
        assertEquals("ko_KR", locale0.toString());
        assertEquals("KOR", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("ko", locale0.getLanguage());

        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        SynchronousQueue<Locale> synchronousQueue0 = new SynchronousQueue<Locale>();
        assertNotNull(synchronousQueue0);
        assertFalse(synchronousQueue0.contains(locale0));

        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) synchronousQueue0);
        assertNotNull(list0);
        assertEquals(0, linkedList0.size());
        assertTrue(list0.isEmpty());
        assertEquals(0, list0.size());
        assertFalse(synchronousQueue0.contains(locale0));
        assertFalse(list0.contains(locale0));

        cMD0.parse(stringArray0, locale0);
        assertEquals(5, stringArray0.length);
        assertEquals("KR", locale0.getCountry());
        assertEquals("kor", locale0.getISO3Language());
        assertEquals("ko_KR", locale0.toString());
        assertEquals("KOR", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("ko", locale0.getLanguage());

        CMD.Option<Double> cMD_Option3 = cMD0.addDoubleOption('3', "MysqlIO.65");
        assertFalse(cMD_Option3.equals((Object) cMD_Option0));
        assertFalse(cMD_Option3.equals((Object) cMD_Option1));
        assertNotNull(cMD_Option3);
        assertEquals("3", cMD_Option3.shortForm());
        assertTrue(cMD_Option3.wantsValue());
        assertEquals("MysqlIO.65", cMD_Option3.longForm());
        assertNotSame(cMD_Option3, cMD_Option0);
        assertNotSame(cMD_Option3, cMD_Option1);

        CMD.Option<Double> cMD_Option4 = cMD0.addDoubleOption('<', "net.mooctest.CMD$Option");
        assertFalse(cMD_Option4.equals((Object) cMD_Option1));
        assertFalse(cMD_Option4.equals((Object) cMD_Option3));
        assertFalse(cMD_Option4.equals((Object) cMD_Option0));
        assertNotNull(cMD_Option4);
        assertTrue(cMD_Option4.wantsValue());
        assertEquals("net.mooctest.CMD$Option", cMD_Option4.longForm());
        assertEquals("<", cMD_Option4.shortForm());
        assertNotSame(cMD_Option4, cMD_Option1);
        assertNotSame(cMD_Option4, cMD_Option3);
        assertNotSame(cMD_Option4, cMD_Option0);

        CMD.Option<Boolean> cMD_Option5 = cMD0.addBooleanOption("8bhxV_)oQ{*H4[|@");
        assertNotNull(cMD_Option5);
        assertFalse(cMD_Option5.wantsValue());
        assertEquals("8bhxV_)oQ{*H4[|@", cMD_Option5.longForm());
        assertNull(cMD_Option5.shortForm());

        String[] stringArray1 = cMD0.getRemainingArgs();
        assertFalse(stringArray1.equals((Object) stringArray0));
        assertEquals(5, stringArray1.length);
        assertNotNull(stringArray1);
        assertNotSame(stringArray1, stringArray0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        char char0 = 'x';
        CMD.Option<Long> cMD_Option0 = cMD0.addLongOption('x', "SUPPORTS_FK");
        assertNotNull(cMD_Option0);
        assertEquals("SUPPORTS_FK", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("x", cMD_Option0.shortForm());

        CMD cMD1 = new CMD();
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(cMD1);


        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
        assertEquals("en", locale0.getLanguage());
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("CA", locale0.getCountry());
        assertEquals("en_CA", locale0.toString());

        // Undeclared exception!
        try {
            cMD1.addLongOption((String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String[] stringArray0 = new String[4];
        stringArray0[0] = "m";
        stringArray0[1] = "net.mooctest.CMD$Option";
        stringArray0[2] = "'";
        char char0 = '}';
        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption("X7>JO'");
        assertNotNull(cMD_Option_BooleanOption0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertEquals("X7>JO'", cMD_Option_BooleanOption0.longForm());

        Locale locale0 = Locale.PRC;
        assertNotNull(locale0);
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("zh_CN", locale0.toString());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("CN", locale0.getCountry());

        Boolean boolean0 = cMD_Option_BooleanOption0.parseValue("m", locale0);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertEquals("X7>JO'", cMD_Option_BooleanOption0.longForm());
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("zh_CN", locale0.toString());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("CN", locale0.getCountry());

        CMD.Option<Boolean> cMD_Option0 = cMD0.addOption((CMD.Option<Boolean>) cMD_Option_BooleanOption0);
        assertNotNull(cMD_Option0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertEquals("X7>JO'", cMD_Option_BooleanOption0.longForm());
        assertFalse(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("X7>JO'", cMD_Option0.longForm());

        Collection<Boolean> collection0 = cMD0.getOptionValues(cMD_Option0);
        assertNotNull(collection0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertEquals("X7>JO'", cMD_Option_BooleanOption0.longForm());
        assertFalse(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("X7>JO'", cMD_Option0.longForm());
        assertFalse(collection0.contains(boolean0));

        CMD.Option<Integer> cMD_Option1 = cMD0.addIntegerOption('}', "WuF(Qm");
        assertNotNull(cMD_Option1);
        assertEquals("WuF(Qm", cMD_Option1.longForm());
        assertEquals("}", cMD_Option1.shortForm());
        assertTrue(cMD_Option1.wantsValue());

        stringArray0[3] = "IMtnO3Iwh+qx";
        cMD0.parse(stringArray0);
        assertEquals(4, stringArray0.length);

        CMD.Option<String> cMD_Option2 = cMD0.addStringOption("m");
        assertNotNull(cMD_Option2);
        assertNull(cMD_Option2.shortForm());
        assertTrue(cMD_Option2.wantsValue());
        assertEquals("m", cMD_Option2.longForm());

        String string0 = cMD0.getOptionValue(cMD_Option2, ")ql8GsQfTLe/:|q=X");
        assertNotNull(string0);
        assertEquals(")ql8GsQfTLe/:|q=X", string0);
        assertNull(cMD_Option2.shortForm());
        assertTrue(cMD_Option2.wantsValue());
        assertEquals("m", cMD_Option2.longForm());

        // Undeclared exception!
        try {
            cMD0.addIntegerOption('1', (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        String string0 = "hiydSA.?*yd$M";
        char char0 = 'b';
        CMD.NotFlagException cMD_NotFlagException0 = new CMD.NotFlagException("hiydSA.?*yd$M", 'b');
        assertNotNull(cMD_NotFlagException0);

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);


        // Undeclared exception!
        try {
            cMD0.addStringOption('r', (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD cMD1 = new CMD();
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(cMD1);

        CMD.Option<Double> cMD_Option2 = cMD1.addDoubleOption("ZQk,%3");
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(cMD_Option2);
        assertTrue(cMD_Option2.wantsValue());
        assertNull(cMD_Option2.shortForm());
        assertEquals("ZQk,%3", cMD_Option2.longForm());
        assertNotSame(cMD1, cMD0);

        String string0 = cMD_Option2.longForm();
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(string0);
        assertEquals("ZQk,%3", string0);
        assertTrue(cMD_Option2.wantsValue());
        assertNull(cMD_Option2.shortForm());
        assertEquals("ZQk,%3", cMD_Option2.longForm());
        assertNotSame(cMD1, cMD0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        CMD.UnknownOptionException cMD_UnknownOptionException0 = new CMD.UnknownOptionException(" WHEN UPPER(DATA_TYPE)='MULTILINESTRING' THEN -2", " WHEN UPPER(DATA_TYPE)='MULTILINESTRING' THEN -2");
        assertNotNull(cMD_UnknownOptionException0);

        String string0 = cMD_UnknownOptionException0.getOptionName();
        assertNotNull(string0);
        assertEquals(" WHEN UPPER(DATA_TYPE)='MULTILINESTRING' THEN -2", string0);
        assertEquals(" WHEN UPPER(DATA_TYPE)='MULTILINESTRING' THEN -2", cMD_UnknownOptionException0.getOptionName());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);


        String string0 = "j&`\\R7";
        Locale locale0 = Locale.forLanguageTag("j&`R7");
        assertNotNull(locale0);
        assertEquals("", locale0.toString());
        assertEquals("", locale0.getCountry());
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getVariant());
        assertEquals("", locale0.getISO3Language());
        assertEquals("", locale0.getISO3Country());

        ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
        assertNotNull(arrayList0);
        assertTrue(arrayList0.isEmpty());
        assertEquals(0, arrayList0.size());

        SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
        assertNotNull(synchronousQueue0);
        assertFalse(synchronousQueue0.contains("j&`R7"));

        List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) synchronousQueue0);
        assertNotNull(list0);
        assertTrue(arrayList0.isEmpty());
        assertEquals(0, arrayList0.size());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertFalse(synchronousQueue0.contains("j&`R7"));
        assertFalse(list0.contains("j&`R7"));


        CMD.Option.IntegerOption cMD_Option_IntegerOption0 = new CMD.Option.IntegerOption('E', "");
        assertNotNull(cMD_Option_IntegerOption0);
        assertTrue(cMD_Option_IntegerOption0.wantsValue());
        assertEquals("", cMD_Option_IntegerOption0.longForm());
        assertEquals("E", cMD_Option_IntegerOption0.shortForm());

        CMD.Option<Integer> cMD_Option3 = cMD0.addOption((CMD.Option<Integer>) cMD_Option_IntegerOption0);
        assertNotNull(cMD_Option3);
        assertTrue(cMD_Option_IntegerOption0.wantsValue());
        assertEquals("", cMD_Option_IntegerOption0.longForm());
        assertEquals("E", cMD_Option_IntegerOption0.shortForm());
        assertTrue(cMD_Option3.wantsValue());
        assertEquals("E", cMD_Option3.shortForm());
        assertEquals("", cMD_Option3.longForm());

        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption('E', "");
        assertNotNull(cMD_Option_StringOption0);
        assertEquals("", cMD_Option_StringOption0.longForm());
        assertEquals("E", cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());

        String string1 = cMD0.getOptionValue((CMD.Option<String>) cMD_Option_StringOption0, "");
        assertFalse(string1.equals((Object) string0));
        assertNotNull(string1);
        assertEquals("", string1);
        assertEquals("", cMD_Option_StringOption0.longForm());
        assertEquals("E", cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());

        // Undeclared exception!
        try {
            cMD0.parse((String[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        char char0 = ' ';
        String string0 = "";
        // Undeclared exception!
        try {
            cMD0.getOptionValues((CMD.Option<Boolean>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Long> cMD_Option0 = cMD0.addLongOption('u', "YIi");
        assertNotNull(cMD_Option0);
        assertEquals("u", cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("YIi", cMD_Option0.longForm());

        CMD.Option<Double> cMD_Option3 = cMD0.addDoubleOption('u', "UTC_TIME");
        assertNotNull(cMD_Option3);
        assertEquals("u", cMD_Option3.shortForm());
        assertTrue(cMD_Option3.wantsValue());
        assertEquals("UTC_TIME", cMD_Option3.longForm());

        Double double0 = cMD0.getOptionValue(cMD_Option3, (Double) null);
        assertNull(double0);
        assertEquals("u", cMD_Option3.shortForm());
        assertTrue(cMD_Option3.wantsValue());
        assertEquals("UTC_TIME", cMD_Option3.longForm());

        CMD.Option<String> cMD_Option4 = cMD0.addStringOption("YIi");
        assertNotNull(cMD_Option4);
        assertNull(cMD_Option4.shortForm());
        assertEquals("YIi", cMD_Option4.longForm());
        assertTrue(cMD_Option4.wantsValue());

        String[] stringArray0 = new String[8];
        stringArray0[0] = "COALESCE";
        stringArray0[1] = "UTC_TIME";
        stringArray0[2] = "UTC_TIME";
        stringArray0[3] = "YIi";
        stringArray0[4] = "UTC_TIME";
        stringArray0[5] = "YIi";
        stringArray0[6] = "gH";
        stringArray0[7] = "&'nR>bvLsr";
        Locale locale0 = Locale.CANADA_FRENCH;
        assertNotNull(locale0);
        assertEquals("fr", locale0.getLanguage());
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("fr_CA", locale0.toString());
        assertEquals("fra", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("CA", locale0.getCountry());

        cMD0.parse(stringArray0, locale0);
        assertEquals(8, stringArray0.length);
        assertEquals("fr", locale0.getLanguage());
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("fr_CA", locale0.toString());
        assertEquals("fra", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption("net.mooctest.CMD");
        assertNotNull(cMD_Option_BooleanOption0);
        assertEquals("net.mooctest.CMD", cMD_Option_BooleanOption0.longForm());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());

        Locale locale0 = Locale.UK;
        assertNotNull(locale0);
        assertEquals("en", locale0.getLanguage());
        assertEquals("GBR", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("GB", locale0.getCountry());
        assertEquals("en_GB", locale0.toString());

        Boolean boolean0 = cMD_Option_BooleanOption0.parseValue("", locale0);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertEquals("net.mooctest.CMD", cMD_Option_BooleanOption0.longForm());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("en", locale0.getLanguage());
        assertEquals("GBR", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("GB", locale0.getCountry());
        assertEquals("en_GB", locale0.toString());

        CMD.Option<Boolean> cMD_Option0 = cMD0.addOption((CMD.Option<Boolean>) cMD_Option_BooleanOption0);
        assertNotNull(cMD_Option0);
        assertEquals("net.mooctest.CMD", cMD_Option_BooleanOption0.longForm());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("net.mooctest.CMD", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertFalse(cMD_Option0.wantsValue());

        CMD.IllegalOptionValueException cMD_IllegalOptionValueException0 = new CMD.IllegalOptionValueException(cMD_Option0, "net.mooctest.CMD");
        assertNotNull(cMD_IllegalOptionValueException0);

        CMD.Option<?> cMD_Option1 = cMD_IllegalOptionValueException0.getOption();
        assertNotNull(cMD_Option1);
        assertEquals("net.mooctest.CMD", cMD_Option_BooleanOption0.longForm());
        assertNull(cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("net.mooctest.CMD", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertFalse(cMD_Option0.wantsValue());
        assertEquals("net.mooctest.CMD", cMD_IllegalOptionValueException0.getValue());
        assertFalse(cMD_Option1.wantsValue());
        assertNull(cMD_Option1.shortForm());
        assertEquals("net.mooctest.CMD", cMD_Option1.longForm());

        CMD.Option<String> cMD_Option2 = cMD0.addStringOption('y', "");
        assertNotNull(cMD_Option2);
        assertEquals("", cMD_Option2.longForm());
        assertTrue(cMD_Option2.wantsValue());
        assertEquals("y", cMD_Option2.shortForm());

        String string0 = cMD0.getOptionValue(cMD_Option2, "Crqf]K_db");
        assertNotNull(string0);
        assertEquals("Crqf]K_db", string0);
        assertEquals("", cMD_Option2.longForm());
        assertTrue(cMD_Option2.wantsValue());
        assertEquals("y", cMD_Option2.shortForm());
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('p', "ReplicationConnectionProxy.badValueForAllowMasterDownConnections");
        assertNotNull(cMD_Option_BooleanOption0);
        assertEquals("ReplicationConnectionProxy.badValueForAllowMasterDownConnections", cMD_Option_BooleanOption0.longForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("p", cMD_Option_BooleanOption0.shortForm());

        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
        assertEquals("kor", locale0.getISO3Language());
        assertEquals("ko", locale0.toString());
        assertEquals("", locale0.getCountry());
        assertEquals("ko", locale0.getLanguage());
        assertEquals("", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());

        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        assertNotNull(set0);
        assertEquals("kor", locale0.getISO3Language());
        assertEquals("ko", locale0.toString());
        assertEquals("", locale0.getCountry());
        assertEquals("ko", locale0.getLanguage());
        assertEquals("", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertTrue(set0.isEmpty());
        assertEquals(0, set0.size());
        assertFalse(set0.contains("ReplicationConnectionProxy.badValueForAllowMasterDownConnections"));

        Boolean boolean0 = cMD_Option_BooleanOption0.parseValue("Null longForm not allowed", locale0);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertEquals("ReplicationConnectionProxy.badValueForAllowMasterDownConnections", cMD_Option_BooleanOption0.longForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("p", cMD_Option_BooleanOption0.shortForm());
        assertEquals("kor", locale0.getISO3Language());
        assertEquals("ko", locale0.toString());
        assertEquals("", locale0.getCountry());
        assertEquals("ko", locale0.getLanguage());
        assertEquals("", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        // Undeclared exception!
        try {
            cMD0.addBooleanOption('p', (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption("[oyA;QC:N+=<}:*=[5");
        assertNotNull(cMD_Option_StringOption0);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option_StringOption0.longForm());

        Locale locale0 = Locale.UK;
        assertNotNull(locale0);
        assertEquals("GB", locale0.getCountry());
        assertEquals("en_GB", locale0.toString());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("GBR", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("en", locale0.getLanguage());

        String string0 = cMD_Option_StringOption0.parseValue("RYa7$sl", locale0);
        assertNotNull(string0);
        assertEquals("RYa7$sl", string0);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option_StringOption0.longForm());
        assertEquals("GB", locale0.getCountry());
        assertEquals("en_GB", locale0.toString());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("GBR", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("en", locale0.getLanguage());

        CMD.Option<String> cMD_Option0 = cMD0.addOption((CMD.Option<String>) cMD_Option_StringOption0);
        assertNotNull(cMD_Option0);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option_StringOption0.longForm());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());

        CMD.Option<String> cMD_Option1 = cMD0.addOption(cMD_Option0);
        assertNotNull(cMD_Option1);
        assertNull(cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option_StringOption0.longForm());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
        assertTrue(cMD_Option1.wantsValue());
        assertNull(cMD_Option1.shortForm());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option1.longForm());
        assertSame(cMD_Option0, cMD_Option1);
        assertSame(cMD_Option1, cMD_Option0);

        CMD.Option<Double> cMD_Option2 = cMD0.addDoubleOption(":enRh]Z<m");
        assertNotNull(cMD_Option2);
        assertEquals(":enRh]Z<m", cMD_Option2.longForm());
        assertTrue(cMD_Option2.wantsValue());
        assertNull(cMD_Option2.shortForm());

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('X', ":enRh]Z<m");
        assertNotNull(cMD_Option_BooleanOption0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals(":enRh]Z<m", cMD_Option_BooleanOption0.longForm());
        assertEquals("X", cMD_Option_BooleanOption0.shortForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());

        Boolean boolean0 = cMD_Option_BooleanOption0.parseValue("[oyA;QC:N+=<}:*=[5", (Locale) null);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals(":enRh]Z<m", cMD_Option_BooleanOption0.longForm());
        assertEquals("X", cMD_Option_BooleanOption0.shortForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());

        CMD.Option.LongOption cMD_Option_LongOption0 = new CMD.Option.LongOption(":enRh]Z<m");
        assertNotNull(cMD_Option_LongOption0);
        assertEquals(":enRh]Z<m", cMD_Option_LongOption0.longForm());
        assertTrue(cMD_Option_LongOption0.wantsValue());
        assertNull(cMD_Option_LongOption0.shortForm());

        boolean boolean1 = cMD_Option_LongOption0.wantsValue();
        assertTrue(boolean1);
        assertEquals(":enRh]Z<m", cMD_Option_LongOption0.longForm());
        assertTrue(cMD_Option_LongOption0.wantsValue());
        assertNull(cMD_Option_LongOption0.shortForm());

        CMD.NotFlagException cMD_NotFlagException0 = new CMD.NotFlagException((String) null, 'X');
        assertNotNull(cMD_NotFlagException0);

        char char0 = cMD_NotFlagException0.getOptionChar();
        assertEquals('X', char0);
        assertEquals('X', cMD_NotFlagException0.getOptionChar());
        assertNull(cMD_NotFlagException0.getOptionName());

        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption('X', "[oyA;QC:N+=<}:*=[5");
        assertNotNull(cMD_Option_DoubleOption0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("X", cMD_Option_DoubleOption0.shortForm());
        assertEquals("[oyA;QC:N+=<}:*=[5", cMD_Option_DoubleOption0.longForm());

        // Undeclared exception!
        try {
            cMD_Option_DoubleOption0.parseValue("FM*)R", (Locale) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String[] stringArray0 = new String[6];
        String string0 = "net.mooctest.CMD$Option$IntegerOption";
        stringArray0[0] = "net.mooctest.CMD$Option$IntegerOption";
        stringArray0[1] = "";
        stringArray0[2] = "' requires a value";
        stringArray0[3] = "wC~rfF}BlT ";
        stringArray0[4] = "(H&1";
        stringArray0[5] = "";
        cMD0.parse(stringArray0);
        assertEquals(6, stringArray0.length);

        CMD.Option<String> cMD_Option0 = cMD0.addStringOption('+', " Ma1#NkV;-");
        assertNotNull(cMD_Option0);
        assertTrue(cMD_Option0.wantsValue());
        assertEquals(" Ma1#NkV;-", cMD_Option0.longForm());
        assertEquals("+", cMD_Option0.shortForm());

        String string1 = null;
        // Undeclared exception!
        try {
            cMD0.addBooleanOption((String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String string0 = null;
        // Undeclared exception!
        try {
            cMD0.addLongOption('E', (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption('m', "AdFH]''*SxlG");
        assertNotNull(cMD_Option_DoubleOption0);
        assertEquals("AdFH]''*SxlG", cMD_Option_DoubleOption0.longForm());
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("m", cMD_Option_DoubleOption0.shortForm());

        CMD.Option.IntegerOption cMD_Option_IntegerOption0 = new CMD.Option.IntegerOption("M5");
        assertNotNull(cMD_Option_IntegerOption0);
        assertNull(cMD_Option_IntegerOption0.shortForm());
        assertEquals("M5", cMD_Option_IntegerOption0.longForm());
        assertTrue(cMD_Option_IntegerOption0.wantsValue());

        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        assertNotNull(locale0);
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());
        assertEquals("zh_CN", locale0.toString());
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("CN", locale0.getCountry());

        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
        assertEquals(0, linkedList0.size());

        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        assertNotNull(linkedList1);
        assertEquals(0, linkedList1.size());
        assertFalse(linkedList1.contains(locale0));

        Locale locale1 = Locale.lookup(linkedList0, linkedList1);
        assertNull(locale1);
        assertEquals(0, linkedList0.size());
        assertEquals(0, linkedList1.size());
        assertFalse(linkedList1.contains(locale0));

        try {
            cMD_Option_IntegerOption0.parseValue("M5", locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal value 'M5' for option --M5
            //
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('Y', "");
        assertNotNull(cMD_Option_BooleanOption0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("Y", cMD_Option_BooleanOption0.shortForm());
        assertEquals("", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());

        Locale locale0 = Locale.TAIWAN;
        assertNotNull(locale0);
        assertEquals("", locale0.getVariant());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("TWN", locale0.getISO3Country());
        assertEquals("zh_TW", locale0.toString());
        assertEquals("TW", locale0.getCountry());
        assertEquals("zho", locale0.getISO3Language());

        Boolean boolean0 = cMD_Option_BooleanOption0.getValue("", locale0);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("Y", cMD_Option_BooleanOption0.shortForm());
        assertEquals("", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("", locale0.getVariant());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("TWN", locale0.getISO3Country());
        assertEquals("zh_TW", locale0.toString());
        assertEquals("TW", locale0.getCountry());
        assertEquals("zho", locale0.getISO3Language());

        CMD.IllegalOptionValueException cMD_IllegalOptionValueException0 = new CMD.IllegalOptionValueException((CMD.Option<Boolean>) cMD_Option_BooleanOption0, "");
        assertNotNull(cMD_IllegalOptionValueException0);

        CMD.Option<?> cMD_Option0 = cMD_IllegalOptionValueException0.getOption();
        assertNotNull(cMD_Option0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("Y", cMD_Option_BooleanOption0.shortForm());
        assertEquals("", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("", cMD_IllegalOptionValueException0.getValue());
        assertFalse(cMD_Option0.wantsValue());
        assertEquals("Y", cMD_Option0.shortForm());
        assertEquals("", cMD_Option0.longForm());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption(':', "$0J?");
        assertNotNull(cMD_Option_DoubleOption0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("$0J?", cMD_Option_DoubleOption0.longForm());
        assertEquals(":", cMD_Option_DoubleOption0.shortForm());

        String string0 = cMD_Option_DoubleOption0.shortForm();
        assertNotNull(string0);
        assertEquals(":", string0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("$0J?", cMD_Option_DoubleOption0.longForm());
        assertEquals(":", cMD_Option_DoubleOption0.shortForm());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String string0 = null;
        // Undeclared exception!
        try {
            cMD0.addStringOption((String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('/', "RETURNS");
        assertNotNull(cMD_Option_BooleanOption0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("RETURNS", cMD_Option_BooleanOption0.longForm());
        assertEquals("/", cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());

        Locale locale0 = Locale.forLanguageTag("vk;Bm");
        assertNotNull(locale0);
        assertEquals("", locale0.getVariant());
        assertEquals("", locale0.getCountry());
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getISO3Language());
        assertEquals("", locale0.getISO3Country());
        assertEquals("", locale0.toString());

        Boolean boolean0 = cMD_Option_BooleanOption0.getValue("", locale0);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("RETURNS", cMD_Option_BooleanOption0.longForm());
        assertEquals("/", cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("", locale0.getVariant());
        assertEquals("", locale0.getCountry());
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getISO3Language());
        assertEquals("", locale0.getISO3Country());
        assertEquals("", locale0.toString());

        Boolean boolean1 = cMD_Option_BooleanOption0.getDefaultValue();
        assertNotNull(boolean1);
        assertTrue(boolean1);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("RETURNS", cMD_Option_BooleanOption0.longForm());
        assertEquals("/", cMD_Option_BooleanOption0.shortForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Integer> cMD_Option0 = cMD0.addIntegerOption("RETURNS");
        assertNotNull(cMD_Option0);
        assertNull(cMD_Option0.shortForm());
        assertEquals("RETURNS", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());

        String[] stringArray0 = new String[1];
        stringArray0[0] = "RETURNS";
        cMD0.parse(stringArray0);
        assertEquals(1, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption('v', " WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE");
        assertNotNull(cMD_Option_StringOption0);
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option_StringOption0.longForm());
        assertEquals("v", cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());

        CMD.Option<String> cMD_Option0 = cMD0.addOption((CMD.Option<String>) cMD_Option_StringOption0);
        assertNotNull(cMD_Option0);
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option_StringOption0.longForm());
        assertEquals("v", cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("v", cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option0.longForm());

        CMD.Option<Boolean> cMD_Option1 = cMD0.addBooleanOption(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE");
        assertNotNull(cMD_Option1);
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option1.longForm());
        assertFalse(cMD_Option1.wantsValue());
        assertNull(cMD_Option1.shortForm());

        CMD.Option<Boolean> cMD_Option2 = cMD0.addOption(cMD_Option1);
        assertNotNull(cMD_Option2);
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option1.longForm());
        assertFalse(cMD_Option1.wantsValue());
        assertNull(cMD_Option1.shortForm());
        assertFalse(cMD_Option2.wantsValue());
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option2.longForm());
        assertNull(cMD_Option2.shortForm());
        assertSame(cMD_Option1, cMD_Option2);
        assertSame(cMD_Option2, cMD_Option1);

        Collection<Boolean> collection0 = cMD0.getOptionValues(cMD_Option2);
        assertNotNull(collection0);
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option1.longForm());
        assertFalse(cMD_Option1.wantsValue());
        assertNull(cMD_Option1.shortForm());
        assertFalse(cMD_Option2.wantsValue());
        assertEquals(" WHEN UPPER(DATA_TYPE)='DECIMAL' THEN NUMERIC_SCALE", cMD_Option2.longForm());
        assertNull(cMD_Option2.shortForm());
        assertSame(cMD_Option1, cMD_Option2);
        assertSame(cMD_Option2, cMD_Option1);

        CMD.Option<Boolean> cMD_Option3 = cMD0.addBooleanOption("j_:C%%LIyiV(C$?E^");
        assertFalse(cMD_Option3.equals((Object) cMD_Option2));
        assertFalse(cMD_Option3.equals((Object) cMD_Option1));
        assertNotNull(cMD_Option3);
        assertNull(cMD_Option3.shortForm());
        assertEquals("j_:C%%LIyiV(C$?E^", cMD_Option3.longForm());
        assertFalse(cMD_Option3.wantsValue());
        assertNotSame(cMD_Option3, cMD_Option2);
        assertNotSame(cMD_Option3, cMD_Option1);
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption("");
        assertNotNull(cMD_Option_DoubleOption0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("", cMD_Option_DoubleOption0.longForm());
        assertNull(cMD_Option_DoubleOption0.shortForm());

        CMD.Option.IntegerOption cMD_Option_IntegerOption0 = new CMD.Option.IntegerOption("");
        assertNotNull(cMD_Option_IntegerOption0);
        assertNull(cMD_Option_IntegerOption0.shortForm());
        assertEquals("", cMD_Option_IntegerOption0.longForm());
        assertTrue(cMD_Option_IntegerOption0.wantsValue());

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Boolean> cMD_Option0 = cMD0.addBooleanOption("");
        assertNotNull(cMD_Option0);
        assertFalse(cMD_Option0.wantsValue());
        assertEquals("", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());

        Collection<Double> collection0 = cMD0.getOptionValues((CMD.Option<Double>) cMD_Option_DoubleOption0);
        assertNotNull(collection0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("", cMD_Option_DoubleOption0.longForm());
        assertNull(cMD_Option_DoubleOption0.shortForm());

        CMD.Option<Double> cMD_Option1 = cMD0.addDoubleOption('d', "Connection.CantFindCacheFactory");
        assertNotNull(cMD_Option1);
        assertTrue(cMD_Option1.wantsValue());
        assertEquals("Connection.CantFindCacheFactory", cMD_Option1.longForm());
        assertEquals("d", cMD_Option1.shortForm());
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        String[] stringArray0 = cMD0.getRemainingArgs();
        assertNull(stringArray0);

        CMD.Option<Double> cMD_Option0 = cMD0.addDoubleOption("%kw89 #XIX}Wd9)n9");
        assertNotNull(cMD_Option0);
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("%kw89 #XIX}Wd9)n9", cMD_Option0.longForm());
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        CMD.Option.LongOption cMD_Option_LongOption0 = new CMD.Option.LongOption("'");
        assertNotNull(cMD_Option_LongOption0);
        assertEquals("'", cMD_Option_LongOption0.longForm());
        assertTrue(cMD_Option_LongOption0.wantsValue());
        assertNull(cMD_Option_LongOption0.shortForm());

        boolean boolean0 = cMD_Option_LongOption0.wantsValue();
        assertTrue(boolean0);
        assertEquals("'", cMD_Option_LongOption0.longForm());
        assertTrue(cMD_Option_LongOption0.wantsValue());
        assertNull(cMD_Option_LongOption0.shortForm());
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Integer> cMD_Option0 = cMD0.addIntegerOption('B', "Y _X-L5");
        assertNotNull(cMD_Option0);
        assertEquals("Y _X-L5", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("B", cMD_Option0.shortForm());

        CMD.Option<Long> cMD_Option1 = cMD0.addLongOption('B', "");
        assertNotNull(cMD_Option1);
        assertEquals("B", cMD_Option1.shortForm());
        assertEquals("", cMD_Option1.longForm());
        assertTrue(cMD_Option1.wantsValue());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        CMD.UnknownOptionException cMD_UnknownOptionException0 = new CMD.UnknownOptionException("--");
        assertNotNull(cMD_UnknownOptionException0);

        String string0 = "{i$e\\u&-b";
        CMD.Option.IntegerOption cMD_Option_IntegerOption0 = new CMD.Option.IntegerOption(string0);
        assertNotNull(cMD_Option_IntegerOption0);
        assertTrue(cMD_Option_IntegerOption0.wantsValue());
        assertNull(cMD_Option_IntegerOption0.shortForm());
        assertEquals("{i$e\\u&-b", cMD_Option_IntegerOption0.longForm());

        CMD.UnknownOptionException cMD_UnknownOptionException1 = new CMD.UnknownOptionException("*OLt", "getProceduresReturnsFunctions");
        assertFalse(cMD_UnknownOptionException1.equals((Object) cMD_UnknownOptionException0));
        assertNotNull(cMD_UnknownOptionException1);

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption('%', string0);
        assertNotNull(cMD_Option_StringOption0);
        assertEquals("{i$e\\u&-b", cMD_Option_StringOption0.longForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("%", cMD_Option_StringOption0.shortForm());

        Locale locale0 = Locale.forLanguageTag("CURRENT_ROLE");
        assertNotNull(locale0);
        assertEquals("", locale0.toString());
        assertEquals("", locale0.getISO3Language());
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getVariant());
        assertEquals("", locale0.getCountry());
        assertEquals("", locale0.getISO3Country());

        String string1 = cMD_Option_StringOption0.parseValue(string0, locale0);
        assertNotNull(string1);
        assertEquals("{i$e\\u&-b", string1);
        assertEquals("{i$e\\u&-b", cMD_Option_StringOption0.longForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("%", cMD_Option_StringOption0.shortForm());
        assertEquals("", locale0.toString());
        assertEquals("", locale0.getISO3Language());
        assertEquals("", locale0.getLanguage());
        assertEquals("", locale0.getVariant());
        assertEquals("", locale0.getCountry());
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        char char0 = 'X';
        String string0 = null;
        // Undeclared exception!
        try {
            cMD0.addDoubleOption('X', (String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
            //
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption("G");
        assertNotNull(cMD_Option_StringOption0);
        assertEquals("G", cMD_Option_StringOption0.longForm());
        assertNull(cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());

        CMD.Option<String> cMD_Option0 = cMD0.addOption((CMD.Option<String>) cMD_Option_StringOption0);
        assertNotNull(cMD_Option0);
        assertEquals("G", cMD_Option_StringOption0.longForm());
        assertNull(cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("G", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());

        // Undeclared exception!
        try {
            cMD0.addDoubleOption((String) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Null longForm not allowed
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        char char0 = '.';
        String string0 = "*6& sAY6s~%";
        CMD.Option.IntegerOption cMD_Option_IntegerOption0 = new CMD.Option.IntegerOption('.', "*6& sAY6s~%");
        assertNotNull(cMD_Option_IntegerOption0);
        assertEquals("*6& sAY6s~%", cMD_Option_IntegerOption0.longForm());
        assertEquals(".", cMD_Option_IntegerOption0.shortForm());
        assertTrue(cMD_Option_IntegerOption0.wantsValue());

        String string1 = "";
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption("");
        assertNotNull(cMD_Option_DoubleOption0);
        assertNull(cMD_Option_DoubleOption0.shortForm());
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("", cMD_Option_DoubleOption0.longForm());

        String string2 = "`@t99f";
        Locale locale0 = Locale.TAIWAN;
        assertNotNull(locale0);
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("TW", locale0.getCountry());
        assertEquals("TWN", locale0.getISO3Country());
        assertEquals("zh_TW", locale0.toString());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("", locale0.getVariant());

        Double double0 = cMD_Option_DoubleOption0.parseValue("7kkvt?)lN", locale0);
        assertNotNull(double0);
        assertEquals(7.0, (double) double0, 0.01);
        assertNull(cMD_Option_DoubleOption0.shortForm());
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("", cMD_Option_DoubleOption0.longForm());
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("TW", locale0.getCountry());
        assertEquals("TWN", locale0.getISO3Country());
        assertEquals("zh_TW", locale0.toString());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("", locale0.getVariant());

        try {
            cMD_Option_DoubleOption0.parseValue("`@t99f", locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal value '`@t99f' for option --
            //
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption('%', "Unknown option '");
        assertNotNull(cMD_Option_DoubleOption0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("%", cMD_Option_DoubleOption0.shortForm());
        assertEquals("Unknown option '", cMD_Option_DoubleOption0.longForm());

        Locale locale0 = Locale.JAPAN;
        assertNotNull(locale0);
        assertEquals("jpn", locale0.getISO3Language());
        assertEquals("JP", locale0.getCountry());
        assertEquals("ja_JP", locale0.toString());
        assertEquals("ja", locale0.getLanguage());
        assertEquals("JPN", locale0.getISO3Country());
        assertEquals("", locale0.getVariant());

        try {
            cMD_Option_DoubleOption0.parseValue("Unknown option '", locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal value 'Unknown option '' for option -%/--Unknown option '
            //
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        CMD.Option.IntegerOption cMD_Option_IntegerOption0 = new CMD.Option.IntegerOption("' requires a value");
        assertNotNull(cMD_Option_IntegerOption0);
        assertTrue(cMD_Option_IntegerOption0.wantsValue());
        assertEquals("' requires a value", cMD_Option_IntegerOption0.longForm());
        assertNull(cMD_Option_IntegerOption0.shortForm());

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<String> cMD_Option0 = cMD0.addStringOption("[6S}-cSkb");
        assertNotNull(cMD_Option0);
        assertEquals("[6S}-cSkb", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());

        String string0 = "\n\n";
        CMD.Option<Boolean> cMD_Option1 = cMD0.addBooleanOption('\"', "sYi");
        assertNotNull(cMD_Option1);
        assertEquals("\"", cMD_Option1.shortForm());
        assertFalse(cMD_Option1.wantsValue());
        assertEquals("sYi", cMD_Option1.longForm());


        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
        assertEquals("", locale0.getVariant());
        assertEquals("en", locale0.getLanguage());
        assertEquals("en_CA", locale0.toString());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("CA", locale0.getCountry());

        Locale.Category locale_Category0 = Locale.Category.FORMAT;
        Locale.setDefault(locale_Category0, locale0);
        assertEquals("", locale0.getVariant());
        assertEquals("en", locale0.getLanguage());
        assertEquals("en_CA", locale0.toString());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("CAN", locale0.getISO3Country());
        assertEquals("CA", locale0.getCountry());

        CMD.Option<Boolean> cMD_Option4 = cMD0.addBooleanOption(']', "");
        assertFalse(cMD_Option4.equals((Object) cMD_Option1));
        assertNotNull(cMD_Option4);
        assertEquals("", cMD_Option4.longForm());
        assertFalse(cMD_Option4.wantsValue());
        assertEquals("]", cMD_Option4.shortForm());
        assertNotSame(cMD_Option4, cMD_Option1);

        CMD.Option<Boolean> cMD_Option5 = cMD0.addBooleanOption('i', "' requires a value");
        assertFalse(cMD_Option5.equals((Object) cMD_Option4));
        assertFalse(cMD_Option5.equals((Object) cMD_Option1));
        assertNotNull(cMD_Option5);
        assertFalse(cMD_Option5.wantsValue());
        assertEquals("i", cMD_Option5.shortForm());
        assertEquals("' requires a value", cMD_Option5.longForm());
        assertNotSame(cMD_Option5, cMD_Option4);
        assertNotSame(cMD_Option5, cMD_Option1);

        Locale locale1 = Locale.forLanguageTag("SU^~h^");
        assertFalse(locale1.equals((Object) locale0));
        assertNotNull(locale1);
        assertEquals("", locale1.toString());
        assertEquals("", locale1.getISO3Country());
        assertEquals("", locale1.getVariant());
        assertEquals("", locale1.getLanguage());
        assertEquals("", locale1.getISO3Language());
        assertEquals("", locale1.getCountry());
        assertNotSame(locale1, locale0);

        String string1 = cMD_Option0.parseValue("", locale1);
        assertFalse(string1.equals((Object) string0));
        assertFalse(locale1.equals((Object) locale0));
        assertNotNull(string1);
        assertEquals("", string1);
        assertEquals("[6S}-cSkb", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("", locale1.toString());
        assertEquals("", locale1.getISO3Country());
        assertEquals("", locale1.getVariant());
        assertEquals("", locale1.getLanguage());
        assertEquals("", locale1.getISO3Language());
        assertEquals("", locale1.getCountry());
        assertNotSame(locale1, locale0);

        CMD.Option<Boolean> cMD_Option6 = cMD0.addBooleanOption('i', "' requires a value");
        assertFalse(cMD_Option6.equals((Object) cMD_Option1));
        assertFalse(cMD_Option6.equals((Object) cMD_Option5));
        assertFalse(cMD_Option6.equals((Object) cMD_Option4));
        assertNotNull(cMD_Option6);
        assertEquals("i", cMD_Option6.shortForm());
        assertFalse(cMD_Option6.wantsValue());
        assertEquals("' requires a value", cMD_Option6.longForm());
        assertNotSame(cMD_Option6, cMD_Option1);
        assertNotSame(cMD_Option6, cMD_Option5);
        assertNotSame(cMD_Option6, cMD_Option4);

        String string2 = locale1.getDisplayCountry();
        assertTrue(string2.equals((Object) string1));
        assertFalse(string2.equals((Object) string0));
        assertFalse(locale1.equals((Object) locale0));
        assertNotNull(string2);
        assertEquals("", string2);
        assertEquals("", locale1.toString());
        assertEquals("", locale1.getISO3Country());
        assertEquals("", locale1.getVariant());
        assertEquals("", locale1.getLanguage());
        assertEquals("", locale1.getISO3Language());
        assertEquals("", locale1.getCountry());
        assertNotSame(locale1, locale0);

        String string3 = cMD_Option0.parseValue("\n\n", locale1);
        assertFalse(string3.equals((Object) string1));
        assertTrue(string3.equals((Object) string0));
        assertFalse(string3.equals((Object) string2));
        assertFalse(locale1.equals((Object) locale0));
        assertNotNull(string3);
        assertEquals("\n\n", string3);
        assertEquals("[6S}-cSkb", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("", locale1.toString());
        assertEquals("", locale1.getISO3Country());
        assertEquals("", locale1.getVariant());
        assertEquals("", locale1.getLanguage());
        assertEquals("", locale1.getISO3Language());
        assertEquals("", locale1.getCountry());
        assertNotSame(locale1, locale0);

        CMD.Option<String> cMD_Option7 = cMD0.addOption(cMD_Option0);
        assertNotNull(cMD_Option7);
        assertEquals("[6S}-cSkb", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());
        assertNull(cMD_Option0.shortForm());
        assertEquals("[6S}-cSkb", cMD_Option7.longForm());
        assertTrue(cMD_Option7.wantsValue());
        assertNull(cMD_Option7.shortForm());
        assertSame(cMD_Option0, cMD_Option7);
        assertSame(cMD_Option7, cMD_Option0);

        CMD.Option<Boolean> cMD_Option8 = cMD0.addBooleanOption("\n\n");
        assertFalse(cMD_Option8.equals((Object) cMD_Option1));
        assertFalse(cMD_Option8.equals((Object) cMD_Option6));
        assertFalse(cMD_Option8.equals((Object) cMD_Option4));
        assertFalse(cMD_Option8.equals((Object) cMD_Option5));
        assertNotNull(cMD_Option8);
        assertEquals("\n\n", cMD_Option8.longForm());
        assertNull(cMD_Option8.shortForm());
        assertFalse(cMD_Option8.wantsValue());
        assertNotSame(cMD_Option8, cMD_Option1);
        assertNotSame(cMD_Option8, cMD_Option6);
        assertNotSame(cMD_Option8, cMD_Option4);
        assertNotSame(cMD_Option8, cMD_Option5);

        // Undeclared exception!
        try {
            cMD0.addOption((CMD.Option<Double>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //

        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        // Undeclared exception!
        try {
            cMD0.getOptionValue((CMD.Option<CMD.Option.StringOption>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //

        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption('^', "10E");
        assertNotNull(cMD_Option_StringOption0);
        assertEquals("^", cMD_Option_StringOption0.shortForm());
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertEquals("10E", cMD_Option_StringOption0.longForm());

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Boolean> cMD_Option0 = cMD0.addBooleanOption(";cem: G(%:#HZ");
        assertNotNull(cMD_Option0);
        assertEquals(";cem: G(%:#HZ", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertFalse(cMD_Option0.wantsValue());

        CMD.Option<String> cMD_Option1 = cMD0.addStringOption("10E");
        assertNotNull(cMD_Option1);
        assertTrue(cMD_Option1.wantsValue());
        assertNull(cMD_Option1.shortForm());
        assertEquals("10E", cMD_Option1.longForm());
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<Integer> cMD_Option0 = cMD0.addIntegerOption("#j@M0364LS");
        assertNotNull(cMD_Option0);
        assertEquals("#j@M0364LS", cMD_Option0.longForm());
        assertNull(cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        CMD.UnknownOptionException cMD_UnknownOptionException0 = new CMD.UnknownOptionException("loadBalanceAutoCommitStatementRegex", "loadBalanceAutoCommitStatementRegex");
        assertNotNull(cMD_UnknownOptionException0);

        CMD.NotFlagException cMD_NotFlagException0 = new CMD.NotFlagException("net.mooctest.CMD$UnknownSuboptionException", 'W');
        assertNotNull(cMD_NotFlagException0);

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption("loadBalanceAutoCommitStatementRegex");
        assertNotNull(cMD_Option_BooleanOption0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("loadBalanceAutoCommitStatementRegex", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertNull(cMD_Option_BooleanOption0.shortForm());

        Boolean boolean0 = cMD_Option_BooleanOption0.parseValue("y3t(mRr6`o[yKF\"&'0", (Locale) null);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("loadBalanceAutoCommitStatementRegex", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertNull(cMD_Option_BooleanOption0.shortForm());

        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        // Undeclared exception!
        try {
            cMD0.addOption((CMD.Option<CMD.Option.StringOption>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //

        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('c', "/");
        assertNotNull(cMD_Option_BooleanOption0);
        assertEquals("c", cMD_Option_BooleanOption0.shortForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("/", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());

        Locale locale0 = Locale.PRC;
        assertNotNull(locale0);
        assertEquals("zh", locale0.getLanguage());
        assertEquals("zh_CN", locale0.toString());
        assertEquals("CN", locale0.getCountry());
        assertEquals("", locale0.getVariant());
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("zho", locale0.getISO3Language());

        Boolean boolean0 = cMD_Option_BooleanOption0.parseValue("/", locale0);
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertEquals("c", cMD_Option_BooleanOption0.shortForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
        assertEquals("/", cMD_Option_BooleanOption0.longForm());
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("zh_CN", locale0.toString());
        assertEquals("CN", locale0.getCountry());
        assertEquals("", locale0.getVariant());
        assertEquals("CHN", locale0.getISO3Country());
        assertEquals("zho", locale0.getISO3Language());

        CMD.Option.BooleanOption cMD_Option_BooleanOption1 = new CMD.Option.BooleanOption('c', "Null longForm not allowed");
        assertNotNull(cMD_Option_BooleanOption1);
        assertEquals("Null longForm not allowed", cMD_Option_BooleanOption1.longForm());
        assertTrue(cMD_Option_BooleanOption1.getDefaultValue());
        assertFalse(cMD_Option_BooleanOption1.wantsValue());
        assertEquals("c", cMD_Option_BooleanOption1.shortForm());

        CMD.UnknownOptionException cMD_UnknownOptionException0 = new CMD.UnknownOptionException(",flags=", "Null longForm not allowed");
        assertNotNull(cMD_UnknownOptionException0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<String> cMD_Option0 = cMD0.addStringOption(".#:^");
        assertNotNull(cMD_Option0);
        assertNull(cMD_Option0.shortForm());
        assertEquals(".#:^", cMD_Option0.longForm());
        assertTrue(cMD_Option0.wantsValue());

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('>', "net.mooctest.CMD$UnknownSuboptionException");
        assertNotNull(cMD_Option_BooleanOption0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("net.mooctest.CMD$UnknownSuboptionException", cMD_Option_BooleanOption0.longForm());
        assertEquals(">", cMD_Option_BooleanOption0.shortForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());

        Boolean boolean0 = cMD_Option_BooleanOption0.getDefaultValue();
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertTrue(cMD_Option_BooleanOption0.getDefaultValue());
        assertEquals("net.mooctest.CMD$UnknownSuboptionException", cMD_Option_BooleanOption0.longForm());
        assertEquals(">", cMD_Option_BooleanOption0.shortForm());
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption("");
        assertNotNull(cMD_Option_StringOption0);
        assertTrue(cMD_Option_StringOption0.wantsValue());
        assertNull(cMD_Option_StringOption0.shortForm());
        assertEquals("", cMD_Option_StringOption0.longForm());
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption("'RT!k,&1i2N$?");
        assertNotNull(cMD_Option_DoubleOption0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
        assertEquals("'RT!k,&1i2N$?", cMD_Option_DoubleOption0.longForm());
        assertNull(cMD_Option_DoubleOption0.shortForm());
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        CMD.Option.LongOption cMD_Option_LongOption0 = new CMD.Option.LongOption('X', "!rgf\":s!2#vxz(q=x");
        assertNotNull(cMD_Option_LongOption0);
        assertEquals("!rgf\":s!2#vxz(q=x", cMD_Option_LongOption0.longForm());
        assertEquals("X", cMD_Option_LongOption0.shortForm());
        assertTrue(cMD_Option_LongOption0.wantsValue());

        Locale locale0 = Locale.CHINESE;
        assertNotNull(locale0);
        assertEquals("zh", locale0.toString());
        assertEquals("", locale0.getCountry());
        assertEquals("zho", locale0.getISO3Language());
        assertEquals("zh", locale0.getLanguage());
        assertEquals("", locale0.getVariant());
        assertEquals("", locale0.getISO3Country());

        try {
            cMD_Option_LongOption0.parseValue("!rgf\":s!2#vxz(q=x", locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal value '!rgf\":s!2#vxz(q=x' for option -X/--!rgf\":s!2#vxz(q=x
            //

        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        CMD.Option.LongOption cMD_Option_LongOption0 = new CMD.Option.LongOption('A', "S:$Pe%JQF|=");
        assertNotNull(cMD_Option_LongOption0);
        assertEquals("S:$Pe%JQF|=", cMD_Option_LongOption0.longForm());
        assertTrue(cMD_Option_LongOption0.wantsValue());
        assertEquals("A", cMD_Option_LongOption0.shortForm());
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        CMD cMD0 = new CMD();
        assertNotNull(cMD0);

        CMD.Option<String> cMD_Option0 = cMD0.addStringOption('u', "yYlx");
        assertNotNull(cMD_Option0);
        assertEquals("u", cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("yYlx", cMD_Option0.longForm());

        CMD.Option<String> cMD_Option1 = cMD0.addOption(cMD_Option0);
        assertNotNull(cMD_Option1);
        assertEquals("u", cMD_Option0.shortForm());
        assertTrue(cMD_Option0.wantsValue());
        assertEquals("yYlx", cMD_Option0.longForm());
        assertEquals("u", cMD_Option1.shortForm());
        assertEquals("yYlx", cMD_Option1.longForm());
        assertTrue(cMD_Option1.wantsValue());
        assertSame(cMD_Option0, cMD_Option1);
        assertSame(cMD_Option1, cMD_Option0);

        CMD cMD1 = new CMD();
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(cMD1);

        CMD.Option<Boolean> cMD_Option2 = cMD0.addBooleanOption('Q', "uy_y`g2s");
        assertFalse(cMD0.equals((Object) cMD1));
        assertNotNull(cMD_Option2);
        assertEquals("uy_y`g2s", cMD_Option2.longForm());
        assertEquals("Q", cMD_Option2.shortForm());
        assertFalse(cMD_Option2.wantsValue());
        assertNotSame(cMD0, cMD1);

        CMD.Option<Boolean> cMD_Option3 = cMD1.addOption(cMD_Option2);
        assertFalse(cMD0.equals((Object) cMD1));
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(cMD_Option3);
        assertEquals("uy_y`g2s", cMD_Option2.longForm());
        assertEquals("Q", cMD_Option2.shortForm());
        assertFalse(cMD_Option2.wantsValue());
        assertEquals("uy_y`g2s", cMD_Option3.longForm());
        assertEquals("Q", cMD_Option3.shortForm());
        assertFalse(cMD_Option3.wantsValue());
        assertNotSame(cMD0, cMD1);
        assertNotSame(cMD1, cMD0);
        assertSame(cMD_Option2, cMD_Option3);
        assertSame(cMD_Option3, cMD_Option2);

        Locale locale0 = Locale.US;
        assertNotNull(locale0);
        assertEquals("USA", locale0.getISO3Country());
        assertEquals("en", locale0.getLanguage());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("US", locale0.getCountry());
        assertEquals("en_US", locale0.toString());

        Boolean boolean0 = cMD_Option3.parseValue("8.V", locale0);
        assertFalse(cMD0.equals((Object) cMD1));
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(boolean0);
        assertTrue(boolean0);
        assertEquals("uy_y`g2s", cMD_Option2.longForm());
        assertEquals("Q", cMD_Option2.shortForm());
        assertFalse(cMD_Option2.wantsValue());
        assertEquals("uy_y`g2s", cMD_Option3.longForm());
        assertEquals("Q", cMD_Option3.shortForm());
        assertFalse(cMD_Option3.wantsValue());
        assertEquals("USA", locale0.getISO3Country());
        assertEquals("en", locale0.getLanguage());
        assertEquals("eng", locale0.getISO3Language());
        assertEquals("", locale0.getVariant());
        assertEquals("US", locale0.getCountry());
        assertEquals("en_US", locale0.toString());
        assertNotSame(cMD0, cMD1);
        assertNotSame(cMD1, cMD0);
        assertSame(cMD_Option2, cMD_Option3);
        assertSame(cMD_Option3, cMD_Option2);

        Collection<Boolean> collection0 = cMD0.getOptionValues(cMD_Option3);
        assertFalse(cMD0.equals((Object) cMD1));
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(collection0);
        assertEquals("uy_y`g2s", cMD_Option2.longForm());
        assertEquals("Q", cMD_Option2.shortForm());
        assertFalse(cMD_Option2.wantsValue());
        assertEquals("uy_y`g2s", cMD_Option3.longForm());
        assertEquals("Q", cMD_Option3.shortForm());
        assertFalse(cMD_Option3.wantsValue());
        assertNotSame(cMD0, cMD1);
        assertNotSame(cMD1, cMD0);
        assertSame(cMD_Option2, cMD_Option3);
        assertSame(cMD_Option3, cMD_Option2);
        assertFalse(collection0.contains(boolean0));

        CMD.Option<Boolean> cMD_Option4 = cMD0.addBooleanOption("}#{2zuq");
        assertFalse(cMD0.equals((Object) cMD1));
        assertFalse(cMD_Option4.equals((Object) cMD_Option2));
        assertFalse(cMD_Option4.equals((Object) cMD_Option3));
        assertNotNull(cMD_Option4);
        assertFalse(cMD_Option4.wantsValue());
        assertNull(cMD_Option4.shortForm());
        assertEquals("}#{2zuq", cMD_Option4.longForm());
        assertNotSame(cMD0, cMD1);
        assertNotSame(cMD_Option4, cMD_Option2);
        assertNotSame(cMD_Option4, cMD_Option3);

        CMD.Option<Long> cMD_Option5 = cMD0.addLongOption("yYlx");
        assertFalse(cMD0.equals((Object) cMD1));
        assertNotNull(cMD_Option5);
        assertTrue(cMD_Option5.wantsValue());
        assertNull(cMD_Option5.shortForm());
        assertEquals("yYlx", cMD_Option5.longForm());
        assertNotSame(cMD0, cMD1);

        CMD.Option<Long> cMD_Option6 = cMD1.addOption(cMD_Option5);
        assertFalse(cMD0.equals((Object) cMD1));
        assertFalse(cMD1.equals((Object) cMD0));
        assertNotNull(cMD_Option6);
        assertTrue(cMD_Option5.wantsValue());
        assertNull(cMD_Option5.shortForm());
        assertEquals("yYlx", cMD_Option5.longForm());
        assertNull(cMD_Option6.shortForm());
        assertEquals("yYlx", cMD_Option6.longForm());
        assertTrue(cMD_Option6.wantsValue());
        assertNotSame(cMD0, cMD1);
        assertNotSame(cMD1, cMD0);
        assertSame(cMD_Option5, cMD_Option6);
        assertSame(cMD_Option6, cMD_Option5);

        CMD.Option<String> cMD_Option7 = cMD0.addStringOption("y^`z");
        assertFalse(cMD0.equals((Object) cMD1));
        assertFalse(cMD_Option7.equals((Object) cMD_Option1));
        assertFalse(cMD_Option7.equals((Object) cMD_Option0));
        assertNotNull(cMD_Option7);
        assertNull(cMD_Option7.shortForm());
        assertEquals("y^`z", cMD_Option7.longForm());
        assertTrue(cMD_Option7.wantsValue());
        assertNotSame(cMD0, cMD1);
        assertNotSame(cMD_Option7, cMD_Option1);
        assertNotSame(cMD_Option7, cMD_Option0);
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        CMD cMD0 = new CMD();
        cMD0.addDoubleOption("-Unknown option '");
        cMD0.addLongOption('P', "Wmz@D");
        cMD0.addStringOption("Gf$KRmWJ:?L>iSD^");
        String string0 = "-W1BL4UIVLp";
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Wmz@D";
        stringArray0[1] = "-W1BL4UIVLp";
        stringArray0[2] = "-W1BL4UIVLp";
        stringArray0[6] = "Wmz@D";
        stringArray0[4] = "Wmz@D";
        stringArray0[7] = "-W1BL4UIVLp";
        stringArray0[8] = "-W1BL4UIVLp";
        Locale locale0 = Locale.FRENCH;
        try {
            cMD0.parse(stringArray0, locale0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal option: '' in '-W1BL4UIVLp'
            //
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        CMD.UnknownSuboptionException cMD_UnknownSuboptionException0 = new CMD.UnknownSuboptionException("com.mysql.cj.mysqlx.io.SqlResultMessageListener$ResultType", 'h');
        cMD_UnknownSuboptionException0.fillInStackTrace();
        cMD_UnknownSuboptionException0.toString();
        cMD_UnknownSuboptionException0.getSuboption();
        CMD cMD0 = new CMD();

        Locale locale0 = Locale.JAPAN;
        cMD0.addStringOption("WITH");
        // Undeclared exception!
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        CMD cMD0 = new CMD();
        cMD0.getRemainingArgs();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "-Wmz@";
        stringArray0[2] = "Qj#/tu$";
        stringArray0[3] = "Connection.21";
        stringArray0[4] = "[ldwh^w8* Kh3";
        stringArray0[5] = "";
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        linkedList0.clear();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        Locale.lookup(linkedList0, linkedList1);
        try {
            cMD0.parse(stringArray0, (Locale) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Illegal option: 'W' in '-Wmz@'
            //
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        CMD cMD0 = new CMD();
        CMD.UnknownSuboptionException cMD_UnknownSuboptionException0 = new CMD.UnknownSuboptionException("H6:b@YOy.LLT2\"T]p)%", 'Y');
        cMD_UnknownSuboptionException0.printStackTrace();
        char char0 = cMD_UnknownSuboptionException0.getSuboption();
        assertEquals("H6:b@YOy.LLT2\"T]p)%", cMD_UnknownSuboptionException0.getOptionName());
        assertEquals('Y', char0);

        CMD cMD1 = new CMD();
        cMD1.addIntegerOption('Y', "H6:b@YOy.LLT2\"T]p)%");
        CMD.Option<Integer> cMD_Option4 = cMD0.addIntegerOption('_', "lY1tCiwH4w>cCik?X=");
        assertEquals("_", cMD_Option4.shortForm());
        assertTrue(cMD_Option4.wantsValue());
        assertEquals("lY1tCiwH4w>cCik?X=", cMD_Option4.longForm());
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        CMD cMD0 = new CMD();
        CMD.NotFlagException cMD_NotFlagException0 = new CMD.NotFlagException("9", 'c');
        char char0 = cMD_NotFlagException0.getOptionChar();
        assertEquals('c', char0);
        assertEquals("9", cMD_NotFlagException0.getOptionName());

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption("9");
        Boolean boolean0 = new Boolean("2G~_UQHz0<");
        cMD0.addLongOption(",7mgn$8");
        String[] stringArray0 = new String[1];
        stringArray0[0] = "E";
        Locale locale0 = Locale.ITALIAN;
        cMD0.parse(stringArray0, locale0);
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption("8UsyPIy*fY/Rhg}1g}");
        cMD0.getOptionValue((CMD.Option<Double>) cMD_Option_DoubleOption0);
        assertTrue(cMD_Option_DoubleOption0.wantsValue());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        CMD cMD0 = new CMD();
        cMD0.addLongOption("SOME");
        CMD.Option<String> cMD_Option0 = cMD0.addStringOption(')', "");
        Locale locale0 = Locale.PRC;
        locale0.getDisplayName();
        String string0 = cMD_Option0.getValue("", locale0);
        assertNotNull(string0);

        cMD_Option0.getDefaultValue();
        assertEquals(")", cMD_Option0.shortForm());

        CMD.Option<Double> cMD_Option1 = cMD0.addDoubleOption(')', "SOME");
        assertEquals(")", cMD_Option1.shortForm());

        CMD.Option<Boolean> cMD_Option2 = cMD0.addBooleanOption(')', "");
        assertEquals(")", cMD_Option2.shortForm());

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption('=', "LITERAL_SUFFIX");
        cMD_Option_BooleanOption0.getDefaultValue();
        assertEquals("LITERAL_SUFFIX", cMD_Option_BooleanOption0.longForm());

        CMD.Option<Long> cMD_Option3 = cMD0.addLongOption("");
        assertTrue(cMD_Option3.wantsValue());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        CMD.Option.DoubleOption cMD_Option_DoubleOption0 = new CMD.Option.DoubleOption("");
        CMD cMD0 = new CMD();
        CMD.Option<Double> cMD_Option0 = cMD0.addDoubleOption('T', "HSpuW/yJ7e_-");
        assertEquals("T", cMD_Option0.shortForm());

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption("");
        cMD_Option_BooleanOption0.getDefaultValue();
        CMD.Option.BooleanOption cMD_Option_BooleanOption1 = new CMD.Option.BooleanOption("?;");
        cMD_Option_BooleanOption1.getDefaultValue();
        cMD0.getRemainingArgs();

        CMD.Option.BooleanOption cMD_Option_BooleanOption2 = new CMD.Option.BooleanOption('T', "");
        CMD.Option<String> cMD_Option3 = cMD0.addStringOption('T', "");
        assertEquals("T", cMD_Option3.shortForm());

        CMD.Option<Boolean> cMD_Option4 = cMD0.addBooleanOption('k', "&e_.q~}");
        assertFalse(cMD_Option4.wantsValue());
        assertEquals("k", cMD_Option4.shortForm());
        assertEquals("&e_.q~}", cMD_Option4.longForm());
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption("net.mooctest.CMD$Option$DoubleOption");
        Locale locale0 = Locale.ITALY;
        cMD_Option_StringOption0.getValue("H#xPqZ0z4(doG[(R", locale0);
        Locale locale1 = Locale.forLanguageTag("H#xPqZ0z4(doG[(R");
        String string0 = cMD_Option_StringOption0.getValue("B|Mf'm^Hv`*I:>a&c", locale1);
        assertNotNull(string0);

        CMD.UnknownSuboptionException cMD_UnknownSuboptionException0 = new CMD.UnknownSuboptionException("E", '$');
        String string1 = cMD_UnknownSuboptionException0.getOptionName();
        assertEquals("E", string1);
        assertEquals('$', cMD_UnknownSuboptionException0.getSuboption());
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        CMD cMD0 = new CMD();
        cMD0.addDoubleOption("08007");
        CMD cMD1 = new CMD();
        cMD0.addLongOption('?', "XtS.YT8XeH^@>=");
        CMD.Option.StringOption cMD_Option_StringOption0 = new CMD.Option.StringOption("");
        cMD_Option_StringOption0.getValue("XtS.YT8XeH^@>=", (Locale) null);
        cMD_Option_StringOption0.getValue("R)9S\"35O%rMT", (Locale) null);
        String string0 = cMD_Option_StringOption0.getValue("XtS.YT8XeH^@>=", (Locale) null);
        assertNotNull(string0);

        CMD.Option<String> cMD_Option0 = cMD1.addOption((CMD.Option<String>) cMD_Option_StringOption0);
        cMD0.getOptionValue(cMD_Option0, "~M[Q8gl|");
        CMD.Option<Integer> cMD_Option1 = cMD0.addIntegerOption('?', "/");
        assertEquals("?", cMD_Option1.shortForm());

        cMD0.addIntegerOption("YtgDP,&b");
        CMD.Option<Long> cMD_Option2 = cMD1.addLongOption('v', "XtT");
        assertEquals("v", cMD_Option2.shortForm());

        CMD.Option<Boolean> cMD_Option3 = cMD1.addBooleanOption('v', "net.mooctest.CMD$Option$BooleanOption");
        assertEquals("v", cMD_Option3.shortForm());
        assertEquals("net.mooctest.CMD$Option$BooleanOption", cMD_Option3.longForm());

        String[] stringArray0 = new String[0];
        cMD0.parse(stringArray0);

        CMD.Option.BooleanOption cMD_Option_BooleanOption0 = new CMD.Option.BooleanOption("/");
        cMD_Option_BooleanOption0.getDefaultValue();
        assertFalse(cMD_Option_BooleanOption0.wantsValue());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        CMD cMD0 = new CMD();
        CMD.Option<String> s = new MyOption('a',"aaaa", true);
        cMD0.addOption(s);
        String[] arg = {"-a", "12"};
        cMD0.parse(arg, null);
        System.out.println(s.longForm());

        assertEquals("12", cMD0.getOptionValue(s));
    }
}

class MyOption extends CMD.Option<String>{

    protected MyOption(char shortForm, String longForm, boolean wantsValue) {
        super(shortForm, longForm, wantsValue);
    }

    @Override
    protected String parseValue(String arg, Locale locale) throws CMD.IllegalOptionValueException {
        super.parseValue(arg, locale);
        return arg;
    }
}
