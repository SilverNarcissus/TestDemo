package myUtil.rule;/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 08 02:34:15 GMT 2018
 */


import org.junit.Test;

import static org.junit.Assert.*;

public class Program_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[3];
      Program program0 = new Program(ruleArray0);
      Rule[] ruleArray1 = program0.getProgram();
      assertSame(ruleArray0, ruleArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[0];
      Program program0 = new Program(ruleArray0);
      Rule[] ruleArray1 = program0.getProgram();
      assertSame(ruleArray1, ruleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[0];
      Program program0 = new Program(ruleArray0);
      Fact[] factArray0 = new Fact[0];
      Fact[] factArray1 = program0.deriveAll(factArray0);
      assertEquals(0, factArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[5];
      Program program0 = new Program(ruleArray0);
      // Undeclared exception!
      try { 
        program0.deriveAll((Fact[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Program program0 = new Program((Rule[]) null);
      Predicate predicate0 = new Predicate("");
      Value[] valueArray0 = new Value[0];
      Fact fact0 = new Fact(predicate0, valueArray0);
      Fact[] factArray0 = new Fact[1];
      // Undeclared exception!
      try { 
        program0.canDerive(fact0, factArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[8];
      Predicate predicate0 = new Predicate("");
      Argument[] argumentArray0 = new Argument[1];
      Value value0 = new Value(";6q2B+^f&,zmx");
      Argument argument0 = Argument.value(value0);
      argumentArray0[0] = argument0;
      Datalog datalog0 = new Datalog(predicate0, argumentArray0);
      Datalog[] datalogArray0 = new Datalog[8];
      datalogArray0[0] = datalog0;
      datalogArray0[1] = datalog0;
      datalogArray0[2] = datalog0;
      datalogArray0[3] = datalog0;
      datalogArray0[4] = datalog0;
      datalogArray0[5] = datalog0;
      datalogArray0[6] = datalog0;
      datalogArray0[7] = datalog0;
      Rule rule0 = new Rule(datalog0, datalogArray0);
      ruleArray0[0] = rule0;
      ruleArray0[1] = ruleArray0[0];
      ruleArray0[2] = ruleArray0[0];
      ruleArray0[3] = ruleArray0[2];
      ruleArray0[4] = ruleArray0[1];
      ruleArray0[5] = ruleArray0[0];
      ruleArray0[6] = rule0;
      ruleArray0[7] = ruleArray0[0];
      Program program0 = new Program(ruleArray0);
      Fact[] factArray0 = new Fact[7];
      Fact fact0 = datalog0.toFact();
      factArray0[0] = fact0;
      factArray0[1] = fact0;
      factArray0[2] = fact0;
      factArray0[3] = factArray0[2];
      factArray0[4] = factArray0[2];
      factArray0[5] = fact0;
      factArray0[6] = factArray0[2];
      Fact[] factArray1 = program0.query(datalog0, factArray0);
      assertEquals(1, factArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[0];
      Program program0 = new Program(ruleArray0);
      Predicate predicate0 = new Predicate("");
      Argument[] argumentArray0 = new Argument[8];
      Datalog datalog0 = new Datalog(predicate0, argumentArray0);
      Fact[] factArray0 = new Fact[2];
      Value[] valueArray0 = new Value[1];
      Fact fact0 = new Fact(predicate0, valueArray0);
      factArray0[0] = fact0;
      factArray0[1] = fact0;
      Fact[] factArray1 = program0.query(datalog0, factArray0);
      assertEquals(0, factArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[0];
      Program program0 = new Program(ruleArray0);
      Predicate predicate0 = new Predicate("");
      Argument[] argumentArray0 = new Argument[1];
      Datalog datalog0 = new Datalog(predicate0, argumentArray0);
      Fact[] factArray0 = new Fact[4];
      // Undeclared exception!
      try { 
        program0.query(datalog0, factArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[1];
      Predicate predicate0 = new Predicate("\"");
      Argument[] argumentArray0 = new Argument[3];
      Value value0 = new Value("\"");
      Argument argument0 = Argument.value(value0);
      argumentArray0[0] = argument0;
      argumentArray0[1] = argument0;
      argumentArray0[2] = argument0;
      Datalog datalog0 = new Datalog(predicate0, argumentArray0);
      Datalog[] datalogArray0 = new Datalog[0];
      Rule rule0 = new Rule(datalog0, datalogArray0);
      ruleArray0[0] = rule0;
      Program program0 = new Program(ruleArray0);
      Fact[] factArray0 = new Fact[8];
      Fact[] factArray1 = program0.deriveAll(factArray0);
      assertEquals(2, factArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[4];
      Predicate predicate0 = new Predicate("CCV$%`\"|gl3U>JJh3");
      Argument[] argumentArray0 = new Argument[2];
      Value value0 = new Value("CCV$%`\"|gl3U>JJh3");
      Datalog datalog0 = new Datalog(predicate0, argumentArray0);
      Datalog[] datalogArray0 = new Datalog[6];
      datalogArray0[0] = datalog0;
      Rule rule0 = new Rule(datalog0, datalogArray0);
      ruleArray0[0] = rule0;
      ruleArray0[1] = rule0;
      ruleArray0[2] = rule0;
      ruleArray0[3] = rule0;
      Program program0 = new Program(ruleArray0);
      Value[] valueArray0 = new Value[1];
      valueArray0[0] = value0;
      Fact fact0 = new Fact(predicate0, valueArray0);
      Fact[] factArray0 = new Fact[1];
      factArray0[0] = fact0;
      boolean boolean0 = program0.canDerive(fact0, factArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rule[] ruleArray0 = new Rule[1];
      Predicate predicate0 = new Predicate("roj;p");
      Argument[] argumentArray0 = new Argument[0];
      Datalog datalog0 = new Datalog(predicate0, argumentArray0);
      Datalog[] datalogArray0 = new Datalog[2];
      datalogArray0[0] = datalog0;
      datalogArray0[1] = datalog0;
      Rule rule0 = new Rule(datalog0, datalogArray0);
      ruleArray0[0] = rule0;
      Program program0 = new Program(ruleArray0);
      Value[] valueArray0 = new Value[1];
      Fact fact0 = new Fact(predicate0, valueArray0);
      Fact[] factArray0 = new Fact[1];
      Fact fact1 = datalog0.toFact();
      factArray0[0] = fact1;
      boolean boolean0 = program0.canDerive(fact0, factArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Program program0 = new Program((Rule[]) null);
      Rule[] ruleArray0 = program0.getProgram();
      assertNull(ruleArray0);
  }
}
